(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

// 1.Запросите у пользователя его имя и выведите в ответ: «Привет, его имя!».
var firstBtn = document.getElementById('first'); //достаю кнопку из html файла 

firstBtn.addEventListener('click', function () {
  // при нажатии на клик выполняется действие 
  var name = prompt('Как вас зовут ?'); // запрашиваю имя

  alert("\u041F\u0440\u0438\u0432\u0435\u0442, ".concat(name, "!")); // Выдаю имя 
}); // 2.Запросите у пользователя длину стороны квадрата и выведите периметр такого квадрата.

var secondBtn = document.getElementById('second');
secondBtn.addEventListener('click', function () {
  var sizeOfSquare = prompt('Введите длину стороны квадрата.', 20);
  var sumSquare = 4 * sizeOfSquare;
  alert(sumSquare);
}); // 3.Запросите у пользователя год его рождения, посчитайте, сколько ему лет и выведите результат. Текущий год укажите в коде как константу.

var thirdBtn = document.getElementById('third');
thirdBtn.addEventListener('click', function () {
  var yearYourBirthday = prompt('В каком году вы родились ?', 1900);
  var today = new Date();
  var yourAge = today.getFullYear() - yearYourBirthday;
  alert("\u0412\u0430\u043C ".concat(yourAge, " \u043B\u0435\u0442!"));
}); // 4.Запросите у пользователя радиус окружности и выведите площадь такой окружности.

var fourthBtn = document.getElementById('fourth');
fourthBtn.addEventListener('click', function () {
  var r = prompt('Задайте радиус окружности?', 30);
  var p = 3.1415926535;
  var areaOfCircle = p * Math.pow(r, 2);
  areaOfCircle = Math.floor(areaOfCircle);
  alert("\u041F\u043B\u043E\u0449\u0430\u0434\u044C \u043E\u043A\u0440\u0443\u0436\u043D\u043E\u0441\u0442\u0438 ".concat(areaOfCircle, "!"));
}); // 5.Запросите у пользователя расстояние в км между двумя городами и за сколько часов он хочет добраться. Посчитайте скорость, с которой необходимо двигаться, чтобы успеть вовремя.

var fifthBtn = document.getElementById('fifth');
fifthBtn.addEventListener('click', function () {
  var distance = prompt('Какая дистанция между точкой А и Б?', 340);
  var timeToMove = prompt('За сколько времени вы планируете добраться ?', 6);
  var speed = distance / timeToMove;
  speed = Math.floor(speed);
  alert("\u0412\u0430\u043C \u043D\u0443\u0436\u043D\u043E \u0434\u0432\u0438\u0433\u0430\u0442\u044C\u0441\u044F \u0441\u043E \u0441\u043A\u043E\u0440\u043E\u0441\u0442\u044C ".concat(speed, "\u043A\u043C/\u0447"));
}); // 6.Реализуйте конвертор валют. Пользователь вводит доллары, программа переводит в евро. Курс валюты храните в константе.

var sixthBtn = document.getElementById('sixth');
sixthBtn.addEventListener('click', function () {
  var USD = prompt("\u041A\u0430\u043A\u0443\u044E \u0441\u0443\u043C\u043C\u0443 \u0434\u043E\u043B\u043B\u043E\u0440\u043E\u0432 \u0432\u044B \u0436\u0435\u043B\u0430\u0435\u0442\u0435 \u043F\u043E\u043C\u0435\u043D\u044F\u0442\u044C ?", 1000);
  var EUR = 0.85;
  var sumMoney = USD * EUR;
  alert("\u041C\u0435\u043D\u044F\u044F ".concat(USD, " \u0434\u043E\u043B\u043B\u0430\u0440\u043E\u0432, \u0443 \u0432\u0430\u0441 \u043F\u043E\u043B\u0443\u0447\u0430\u0435\u0442\u0441\u044F ").concat(sumMoney, " \u0435\u0432\u0440\u043E!"));
}); // 7.Пользователь указывает объем флешки в Гб. Программа должна посчитать, сколько файлов размером в 820 Мб помещается на флешку.

var seventhBtn = document.getElementById('seventh');
seventhBtn.addEventListener('click', function () {
  var memory = prompt('Какой у вас обьем флешки в ГБ?', 16);
  var files = memory * 1000 / 820;
  files = Math.floor(files);
  var residue = memory * 1000 % 820;
  alert("\u041D\u0430 \u0432\u0430\u0448\u0443 \u0444\u043B\u0435\u0448\u043A\u0443 \u0441 \u043E\u0431\u044C\u0435\u043C\u043E\u043C ".concat(memory, ", \u0432\u044B \u0441\u043C\u043E\u0436\u0435\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C ").concat(files, " \u0444\u0430\u0439\u043B\u043E\u0432 \u043F\u043E 820\u043C\u0431. \u0410 \u0435\u0449\u0435 \u0443 \u0432\u0430\u0441 \u043E\u0441\u0442\u0430\u043D\u0435\u0442\u0441\u044F ").concat(residue, "\u043C\u0431\uD83D\uDE0A"));
}); // 8.Пользователь вводит сумму денег в кошельке и цену одной шоколадки. Программа выводит, сколько шоколадок может купить пользователь, и сколько сдачи у него останется.

var eighthBtn = document.getElementById('eighth');
eighthBtn.addEventListener('click', function () {
  var amountOfMoney = prompt('Сколько у вас есть денег ?', 200);
  var chokolate = prompt('Цена одной шоколадки?', 28.5);
  var pieces = amountOfMoney / chokolate;
  pieces = Math.floor(pieces);
  var surrender = amountOfMoney % chokolate;
  var currency = 'гривен';
  alert("\u041D\u0430 ".concat(amountOfMoney, "\u0433\u0440\u0438\u0432\u0435\u043D \u0432\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u043A\u0443\u043F\u0438\u0442\u044C ").concat(pieces, " \u0448\u043E\u043A\u043E\u043B\u0430\u0434\u043E\u043A. \u0418 \u0443 \u0432\u0430\u0441 \u043E\u0441\u0442\u0430\u043D\u0435\u0442\u0441\u044F ").concat(surrender, " ").concat(currency, "!"));
}); // 9.Запросите у пользователя трехзначное число и выведите его задом наперед. Для решения задачи вам понадобится оператор % (остаток от деления).

var ninthBtn = document.getElementById('ninth');
ninthBtn.addEventListener('click', function () {
  var num = prompt('Введите любое число! Желательно трехзначное!', 598);

  function getReversedNum(num) {
    var result = 0;

    while (num) {
      result = result * 10 + num % 10;
      num = Math.floor(num / 10);
    }

    return result;
  }

  alert(getReversedNum(num));
}); // 10.Пользователь вводит сумму вклада в банк на 2 месяца, с процентной ставкой депозита 5% годовых. Вывести сумму начисленных процентов.

var tenthBtn = document.getElementById('tenth');
tenthBtn.addEventListener('click', function () {
  var num = prompt('Введите сумму вклада!');
  var months = prompt('На сколько месяцев вы хотите внести сумму ?');
  var sum = num * 0.05 / 12 * months;
  sum = Math.floor(sum);
  alert("\u0417\u0430 ".concat(months, " \u043C\u0435\u0441\u044F\u0446\u0430, \u0432\u0430\u043C \u0431\u0443\u0434\u0435\u0442 \u043D\u0430\u0447\u0438\u0441\u043B\u0435\u043D\u043D\u043E ").concat(sum, " \u0433\u0440\u0438\u0432\u043D\u0443."));
}); //1.1 Запросить у пользователя его возраст и определить, кем он является: ребенком (0–2), подростком (12–18), взрослым (18_60) или пенсионером (60– ...).

var firstOne = document.getElementById('firstOne');
firstOne.addEventListener('click', function () {
  var age = +prompt('Сколько вам лет?');

  if (age < 12) {
    alert('Вы еще ребенок👶');
  } else if (function (age) {
    return 12 || age < 18;
  }) {
    alert('Вы все еще подросток 👦');
  } else if (function (age) {
    return 18 || age < 60;
  }) {
    alert('Поздравляю, вы уже взрослый 👱‍♂️');
  } else if (function (age) {
    return 60 || age <= 100;
  }) {
    alert('Вы уже пенсионер 👴 еще чуть чуть ...');
  } else {
    alert('Странно, вы все еще живы🤔');
  }

  console.log(age);
});

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJwcm9qZWN0cy9qcy1obS9zcmMvanMvYXBwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQTtBQUNBLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFULENBQXdCLE9BQXhCLENBQWYsQyxDQUFpRDs7QUFDakQsUUFBUSxDQUFDLGdCQUFULENBQTJCLE9BQTNCLEVBQW9DLFlBQU07QUFBRTtBQUN4QyxNQUFJLElBQUksR0FBRyxNQUFNLENBQUMsaUJBQUQsQ0FBakIsQ0FEc0MsQ0FDQTs7QUFDdEMsRUFBQSxLQUFLLGlEQUFhLElBQWIsT0FBTCxDQUZzQyxDQUVWO0FBQy9CLENBSEQsRSxDQUtBOztBQUNBLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFULENBQXdCLFFBQXhCLENBQWhCO0FBQ0EsU0FBUyxDQUFDLGdCQUFWLENBQTJCLE9BQTNCLEVBQW9DLFlBQU07QUFDdEMsTUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLGlDQUFELEVBQW9DLEVBQXBDLENBQXpCO0FBQ0EsTUFBSSxTQUFTLEdBQUcsSUFBSSxZQUFwQjtBQUNBLEVBQUEsS0FBSyxDQUFDLFNBQUQsQ0FBTDtBQUNILENBSkQsRSxDQU9BOztBQUNBLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFULENBQXdCLE9BQXhCLENBQWY7QUFDQSxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsT0FBMUIsRUFBbUMsWUFBTTtBQUNyQyxNQUFJLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyw0QkFBRCxFQUErQixJQUEvQixDQUE3QjtBQUNBLE1BQUksS0FBSyxHQUFHLElBQUksSUFBSixFQUFaO0FBQ0EsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLFdBQU4sS0FBc0IsZ0JBQXBDO0FBQ0EsRUFBQSxLQUFLLDhCQUFRLE9BQVIsMEJBQUw7QUFDSCxDQUxELEUsQ0FPQTs7QUFDQSxJQUFJLFNBQVMsR0FBRyxRQUFR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LEtBQUssQ0FBQyxrQkFBRCxDQUFMO0FBQ0gsR0FGRCxNQUVPLElBQUssVUFBQSxHQUFHO0FBQUEsV0FBSSxNQUFNLEdBQUcsR0FBRyxFQUFoQjtBQUFBLEdBQVIsRUFBNEI7QUFDL0IsSUFBQSxLQUFLLENBQUMseUJBQUQsQ0FBTDtBQUNILEdBRk0sTUFFQSxJQUFLLFVBQUEsR0FBRztBQUFBLFdBQUksTUFBTSxHQUFHLEdBQUcsRUFBaEI7QUFBQSxHQUFSLEVBQTRCO0FBQy9CLElBQUEsS0FBSyxDQUFDLG1DQUFELENBQUw7QUFDSCxHQUZNLE1BRUEsSUFBSSxVQUFBLEdBQUc7QUFBQSxXQUFJLE1BQU0sR0FBRyxJQUFJLEdBQWpCO0FBQUEsR0FBUCxFQUE2QjtBQUNoQyxJQUFBLEtBQUssQ0FBQyx1Q0FBRCxDQUFMO0FBQ0gsR0FGTSxNQUVBO0FBQ0gsSUFBQSxLQUFLLENBQUMsNEJBQUQsQ0FBTDtBQUNIOztBQUNELEVBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxHQUFaO0FBQ0gsQ0FmRCIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLy8gMS7Ql9Cw0L/RgNC+0YHQuNGC0LUg0YMg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC10LPQviDQuNC80Y8g0Lgg0LLRi9Cy0LXQtNC40YLQtSDQsiDQvtGC0LLQtdGCOiDCq9Cf0YDQuNCy0LXRgiwg0LXQs9C+INC40LzRjyHCuy5cbmxldCBmaXJzdEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaXJzdCcpOyAvL9C00L7RgdGC0LDRjiDQutC90L7Qv9C60YMg0LjQtyBodG1sINGE0LDQudC70LAgXG5maXJzdEJ0bi5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCAoKSA9PiB7IC8vINC/0YDQuCDQvdCw0LbQsNGC0LjQuCDQvdCwINC60LvQuNC6INCy0YvQv9C+0LvQvdGP0LXRgtGB0Y8g0LTQtdC50YHRgtCy0LjQtSBcbiAgICB2YXIgbmFtZSA9IHByb21wdCgn0JrQsNC6INCy0LDRgSDQt9C+0LLRg9GCID8nKTsgLy8g0LfQsNC/0YDQsNGI0LjQstCw0Y4g0LjQvNGPXG4gICAgYWxlcnQgKGDQn9GA0LjQstC10YIsICR7bmFtZX0hYCk7IC8vINCS0YvQtNCw0Y4g0LjQvNGPIFxufSk7XG5cbi8vIDIu0JfQsNC/0YDQvtGB0LjRgtC1INGDINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQtNC70LjQvdGDINGB0YLQvtGA0L7QvdGLINC60LLQsNC00YDQsNGC0LAg0Lgg0LLRi9Cy0LXQtNC40YLQtSDQv9C10YDQuNC80LXRgtGAINGC0LDQutC+0LPQviDQutCy0LDQtNGA0LDRgtCwLlxubGV0IHNlY29uZEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWNvbmQnKTtcbnNlY29uZEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBsZXQgc2l6ZU9mU3F1YXJlID0gcHJvbXB0KCfQktCy0LXQtNC40YLQtSDQtNC70LjQvdGDINGB0YLQvtGA0L7QvdGLINC60LLQsNC00YDQsNGC0LAuJywgMjApO1xuICAgIGxldCBzdW1TcXVhcmUgPSA0ICogc2l6ZU9mU3F1YXJlO1xuICAgIGFsZXJ0KHN1bVNxdWFyZSk7XG59KTtcblxuXG4vLyAzLtCX0LDQv9GA0L7RgdC40YLQtSDRgyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0LPQvtC0INC10LPQviDRgNC+0LbQtNC10L3QuNGPLCDQv9C+0YHRh9C40YLQsNC50YLQtSwg0YHQutC+0LvRjNC60L4g0LXQvNGDINC70LXRgiDQuCDQstGL0LLQtdC00LjRgtC1INGA0LXQt9GD0LvRjNGC0LDRgi4g0KLQtdC60YPRidC40Lkg0LPQvtC0INGD0LrQsNC20LjRgtC1INCyINC60L7QtNC1INC60LDQuiDQutC+0L3RgdGC0LDQvdGC0YMuXG5sZXQgdGhpcmRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGhpcmQnKTtcbnRoaXJkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGxldCB5ZWFyWW91ckJpcnRoZGF5ID0gcHJvbXB0KCfQkiDQutCw0LrQvtC8INCz0L7QtNGDINCy0Ysg0YDQvtC00LjQu9C40YHRjCA/JywgMTkwMCk7XG4gICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgeW91ckFnZSA9IHRvZGF5LmdldEZ1bGxZZWFyKCkgLSB5ZWFyWW91ckJpcnRoZGF5O1xuICAgIGFsZXJ0KGDQktCw0LwgJHt5b3VyQWdlfSDQu9C10YIhYCk7XG59KTtcblxuLy8gNC7Ql9Cw0L/RgNC+0YHQuNGC0LUg0YMg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINGA0LDQtNC40YPRgSDQvtC60YDRg9C20L3QvtGB0YLQuCDQuCDQstGL0LLQtdC00LjRgtC1INC/0LvQvtGJ0LDQtNGMINGC0LDQutC+0Lkg0L7QutGA0YPQttC90L7RgdGC0LguXG5sZXQgZm91cnRoQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvdXJ0aCcpO1xuZm91cnRoQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGxldCByID0gcHJvbXB0KCfQl9Cw0LTQsNC50YLQtSDRgNCw0LTQuNGD0YEg0L7QutGA0YPQttC90L7RgdGC0Lg/JywgMzApO1xuICAgIGxldCBwID0gMy4xNDE1OTI2NTM1O1xuICAgIGxldCBhcmVhT2ZDaXJjbGUgPSBwICogKHIgKiogMik7XG4gICAgYXJlYU9mQ2lyY2xlID0gTWF0aC5mbG9vcihhcmVhT2ZDaXJjbGUpO1xuICAgIGFsZXJ0KGDQn9C70L7RidCw0LTRjCDQvtC60YDRg9C20L3QvtGB0YLQuCAke2FyZWFPZkNpcmNsZX0hYCk7XG59KTtcblxuLy8gNS7Ql9Cw0L/RgNC+0YHQuNGC0LUg0YMg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINGA0LDRgdGB0YLQvtGP0L3QuNC1INCyINC60Lwg0LzQtdC20LTRgyDQtNCy0YPQvNGPINCz0L7RgNC+0LTQsNC80Lgg0Lgg0LfQsCDRgdC60L7Qu9GM0LrQviDRh9Cw0YHQvtCyINC+0L0g0YXQvtGH0LXRgiDQtNC+0LHRgNCw0YLRjNGB0Y8uINCf0L7RgdGH0LjRgtCw0LnRgtC1INGB0LrQvtGA0L7RgdGC0YwsINGBINC60L7RgtC+0YDQvtC5INC90LXQvtCx0YXQvtC00LjQvNC+INC00LLQuNCz0LDRgtGM0YHRjywg0YfRgtC+0LHRiyDRg9GB0L/QtdGC0Ywg0LLQvtCy0YDQtdC80Y8uXG5sZXQgZmlmdGhCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlmdGgnKTtcbmZpZnRoQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGxldCBkaXN0YW5jZSA9IHByb21wdCgn0JrQsNC60LDRjyDQtNC40YHRgtCw0L3RhtC40Y8g0LzQtdC20LTRgyDRgtC+0YfQutC+0Lkg0JAg0Lgg0JE/JywgMzQwKTtcbiAgICBsZXQgdGltZVRvTW92ZSA9IHByb21wdCgn0JfQsCDRgdC60L7Qu9GM0LrQviDQstGA0LXQvNC10L3QuCDQstGLINC/0LvQsNC90LjRgNGD0LXRgtC1INC00L7QsdGA0LDRgtGM0YHRjyA/JywgNik7XG4gICAgbGV0IHNwZWVkID0gZGlzdGFuY2UgLyB0aW1lVG9Nb3ZlO1xuICAgIHNwZWVkID0gTWF0aC5mbG9vcihzcGVlZCk7XG4gICAgYWxlcnQoYNCS0LDQvCDQvdGD0LbQvdC+INC00LLQuNCz0LDRgtGM0YHRjyDRgdC+INGB0LrQvtGA0L7RgdGC0YwgJHtzcGVlZH3QutC8L9GHYCk7XG59KTtcblxuLy8gNi7QoNC10LDQu9C40LfRg9C50YLQtSDQutC+0L3QstC10YDRgtC+0YAg0LLQsNC70Y7Rgi4g0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINCy0LLQvtC00LjRgiDQtNC+0LvQu9Cw0YDRiywg0L/RgNC+0LPRgNCw0LzQvNCwINC/0LXRgNC10LLQvtC00LjRgiDQsiDQtdCy0YDQvi4g0JrRg9GA0YEg0LLQsNC70Y7RgtGLINGF0YDQsNC90LjRgtC1INCyINC60L7QvdGB0YLQsNC90YLQtS5cbmxldCBzaXh0aEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaXh0aCcpO1xuc2l4dGhCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgbGV0IFVTRCA9IHByb21wdChg0JrQsNC60YPRjiDRgdGD0LzQvNGDINC00L7Qu9C70L7RgNC+0LIg0LLRiyDQttC10LvQsNC10YLQtSDQv9C+0LzQtdC90Y/RgtGMID9gLCAxMDAwKTtcbiAgICBjb25zdCBFVVIgPSAwLjg1O1xuICAgIGxldCBzdW1Nb25leSA9IFVTRCAqIEVVUjtcbiAgICBhbGVydChg0JzQtdC90Y/RjyAke1VTRH0g0LTQvtC70LvQsNGA0L7Qsiwg0YMg0LLQsNGBINC/0L7Qu9GD0YfQsNC10YLRgdGPICR7c3VtTW9uZXl9INC10LLRgNC+IWApO1xufSk7XG5cbi8vIDcu0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINGD0LrQsNC30YvQstCw0LXRgiDQvtCx0YrQtdC8INGE0LvQtdGI0LrQuCDQsiDQk9CxLiDQn9GA0L7Qs9GA0LDQvNC80LAg0LTQvtC70LbQvdCwINC/0L7RgdGH0LjRgtCw0YLRjCwg0YHQutC+0LvRjNC60L4g0YTQsNC50LvQvtCyINGA0LDQt9C80LXRgNC+0Lwg0LIgODIwINCc0LEg0L/QvtC80LXRidCw0LXRgtGB0Y8g0L3QsCDRhNC70LXRiNC60YMuXG5sZXQgc2V2ZW50aEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZXZlbnRoJyk7XG5zZXZlbnRoQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGxldCBtZW1vcnkgPSBwcm9tcHQoJ9Ca0LDQutC+0Lkg0YMg0LLQsNGBINC+0LHRjNC10Lwg0YTQu9C10YjQutC4INCyINCT0JE/JywgMTYpO1xuICAgIGxldCBmaWxlcyA9IChtZW1vcnkgKiAxMDAwKSAvIDgyMDtcbiAgICBmaWxlcyA9IE1hdGguZmxvb3IoZmlsZXMpO1xuICAgIGxldCByZXNpZHVlID0gKG1lbW9yeSAqIDEwMDApICUgODIwO1xuICAgIGFsZXJ0KGDQndCwINCy0LDRiNGDINGE0LvQtdGI0LrRgyDRgSDQvtCx0YzQtdC80L7QvCAke21lbW9yeX0sINCy0Ysg0YHQvNC+0LbQtdGC0LUg0LfQsNCz0YDRg9C30LjRgtGMICR7ZmlsZXN9INGE0LDQudC70L7QsiDQv9C+IDgyMNC80LEuINCQINC10YnQtSDRgyDQstCw0YEg0L7RgdGC0LDQvdC10YLRgdGPICR7cmVzaWR1ZX3QvNCx8J+YimApO1xufSk7XG5cbi8vIDgu0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINCy0LLQvtC00LjRgiDRgdGD0LzQvNGDINC00LXQvdC10LMg0LIg0LrQvtGI0LXQu9GM0LrQtSDQuCDRhtC10L3RgyDQvtC00L3QvtC5INGI0L7QutC+0LvQsNC00LrQuC4g0J/RgNC+0LPRgNCw0LzQvNCwINCy0YvQstC+0LTQuNGCLCDRgdC60L7Qu9GM0LrQviDRiNC+0LrQvtC70LDQtNC+0Log0LzQvtC20LXRgiDQutGD0L/QuNGC0Ywg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMLCDQuCDRgdC60L7Qu9GM0LrQviDRgdC00LDRh9C4INGDINC90LXQs9C+INC+0YHRgtCw0L3QtdGC0YHRjy5cbmxldCBlaWdodGhCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWlnaHRoJyk7XG5laWdodGhCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgbGV0IGFtb3VudE9mTW9uZXkgPSBwcm9tcHQoJ9Ch0LrQvtC70YzQutC+INGDINCy0LDRgSDQtdGB0YLRjCDQtNC10L3QtdCzID8nLCAyMDApO1xuICAgIGxldCBjaG9rb2xhdGUgPSBwcm9tcHQoJ9Cm0LXQvdCwINC+0LTQvdC+0Lkg0YjQvtC60L7Qu9Cw0LTQutC4PycsIDI4LjUpO1xuICAgIGxldCBwaWVjZXMgPSBhbW91bnRPZk1vbmV5IC8gY2hva29sYXRlO1xuICAgIHBpZWNlcyA9IE1hdGguZmxvb3IocGllY2VzKTtcbiAgICBsZXQgc3VycmVuZGVyID0gYW1vdW50T2ZNb25leSAlIGNob2tvbGF0ZTtcbiAgICBsZXQgY3VycmVuY3kgPSAn0LPRgNC40LLQtdC9JztcbiAgICBhbGVydChg0J3QsCAke2Ftb3VudE9mTW9uZXl90LPRgNC40LLQtdC9INCy0Ysg0LzQvtC20LXRgtC1INC60YPQv9C40YLRjCAke3BpZWNlc30g0YjQvtC60L7Qu9Cw0LTQvtC6LiDQmCDRgyDQstCw0YEg0L7RgdGC0LDQvdC10YLRgdGPICR7c3VycmVuZGVyfSAke2N1cnJlbmN5fSFgKTtcbn0pO1xuXG4vLyA5LtCX0LDQv9GA0L7RgdC40YLQtSDRgyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0YLRgNC10YXQt9C90LDRh9C90L7QtSDRh9C40YHQu9C+INC4INCy0YvQstC10LTQuNGC0LUg0LXQs9C+INC30LDQtNC+0Lwg0L3QsNC/0LXRgNC10LQuINCU0LvRjyDRgNC10YjQtdC90LjRjyDQt9Cw0LTQsNGH0Lgg0LLQsNC8INC/0L7QvdCw0LTQvtCx0LjRgtGB0Y8g0L7Qv9C10YDQsNGC0L7RgCAlICjQvtGB0YLQsNGC0L7QuiDQvtGCINC00LXQu9C10L3QuNGPKS5cbmxldCBuaW50aEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduaW50aCcpO1xubmludGhCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgbGV0IG51bSA9IHByb21wdCgn0JLQstC10LTQuNGC0LUg0LvRjtCx0L7QtSDRh9C40YHQu9C+ISDQltC10LvQsNGC0LXQu9GM0L3QviDRgtGA0LXRhdC30L3QsNGH0L3QvtC1IScsIDU5OCk7XG4gICAgZnVuY3Rpb24gZ2V0UmV2ZXJzZWROdW0obnVtKSB7XG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgd2hpbGUgKG51bSkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgKiAxMCArIG51bSAlIDEwO1xuICAgICAgICBudW0gPSBNYXRoLmZsb29yKG51bSAvIDEwKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYWxlcnQoZ2V0UmV2ZXJzZWROdW0obnVtKSk7XG59KTtcblxuLy8gMTAu0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINCy0LLQvtC00LjRgiDRgdGD0LzQvNGDINCy0LrQu9Cw0LTQsCDQsiDQsdCw0L3QuiDQvdCwIDIg0LzQtdGB0Y/RhtCwLCDRgSDQv9GA0L7RhtC10L3RgtC90L7QuSDRgdGC0LDQstC60L7QuSDQtNC10L/QvtC30LjRgtCwIDUlINCz0L7QtNC+0LLRi9GFLiDQktGL0LLQtdGB0YLQuCDRgdGD0LzQvNGDINC90LDRh9C40YHQu9C10L3QvdGL0YUg0L/RgNC+0YbQtdC90YLQvtCyLlxubGV0IHRlbnRoQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RlbnRoJyk7XG50ZW50aEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBsZXQgbnVtID0gcHJvbXB0KCfQktCy0LXQtNC40YLQtSDRgdGD0LzQvNGDINCy0LrQu9Cw0LTQsCEnKTtcbiAgICBsZXQgbW9udGhzID0gcHJvbXB0KCfQndCwINGB0LrQvtC70YzQutC+INC80LXRgdGP0YbQtdCyINCy0Ysg0YXQvtGC0LjRgtC1INCy0L3QtdGB0YLQuCDRgdGD0LzQvNGDID8nKTtcbiAgICBsZXQgc3VtID0gKG51bSAqIDAuMDUpIC8gMTIgKiBtb250aHM7XG4gICAgc3VtID0gTWF0aC5mbG9vcihzdW0pO1xuICAgIGFsZXJ0KGDQl9CwICR7bW9udGhzfSDQvNC10YHRj9GG0LAsINCy0LDQvCDQsdGD0LTQtdGCINC90LDRh9C40YHQu9C10L3QvdC+ICR7c3VtfSDQs9GA0LjQstC90YMuYCk7XG59KTtcblxuLy8xLjEg0JfQsNC/0YDQvtGB0LjRgtGMINGDINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQtdCz0L4g0LLQvtC30YDQsNGB0YIg0Lgg0L7Qv9GA0LXQtNC10LvQuNGC0YwsINC60LXQvCDQvtC9INGP0LLQu9GP0LXRgtGB0Y86INGA0LXQsdC10L3QutC+0LwgKDDigJMyKSwg0L/QvtC00YDQvtGB0YLQutC+0LwgKDEy4oCTMTgpLCDQstC30YDQvtGB0LvRi9C8ICgxOF82MCkg0LjQu9C4INC/0LXQvdGB0LjQvtC90LXRgNC+0LwgKDYw4oCTIC4uLikuXG5sZXQgZmlyc3RPbmUgPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaXJzdE9uZScpO1xuZmlyc3RPbmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgbGV0IGFnZSA9ICtwcm9tcHQoJ9Ch0LrQvtC70YzQutC+INCy0LDQvCDQu9C10YI/Jyk7XG5cbiAgICBpZiggYWdlIDwgMTIpIHtcbiAgICAgICAgYWxlcnQoJ9CS0Ysg0LXRidC1INGA0LXQsdC10L3QvtC68J+RticpO1xuICAgIH0gZWxzZSBpZiAoIGFnZSA9PiAxMiB8fCBhZ2UgPCAxOCkge1xuICAgICAgICBhbGVydCgn0JLRiyDQstGB0LUg0LXRidC1INC/0L7QtNGA0L7RgdGC0L7QuiDwn5GmJyk7XG4gICAgfSBlbHNlIGlmICggYWdlID0+IDE4IHx8IGFnZSA8IDYwKSB7XG4gICAgICAgIGFsZXJ0KCfQn9C+0LfQtNGA0LDQstC70Y/Rjiwg0LLRiyDRg9C20LUg0LLQt9GA0L7RgdC70YvQuSDwn5Gx4oCN4pmC77iPJyk7XG4gICAgfSBlbHNlIGlmKCBhZ2UgPT4gNjAgfHwgYWdlIDw9IDEwMCkge1xuICAgICAgICBhbGVydCgn0JLRiyDRg9C20LUg0L/QtdC90YHQuNC+0L3QtdGAIPCfkbQg0LXRidC1INGH0YPRgtGMINGH0YPRgtGMIC4uLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFsZXJ0KCfQodGC0YDQsNC90L3Qviwg0LLRiyDQstGB0LUg0LXRidC1INC20LjQstGL8J+klCcpO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhhZ2UpO1xufSk7Il0sInByZUV4aXN0aW5nQ29tbWVudCI6Ii8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0p3Y205cVpXTjBjeTlxY3kxb2JTOXpjbU12YW5NdllYQndMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk96czdRVU5CUVR0QlFVTkJMRWxCUVVrc1VVRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF5eGpRVUZVTEVOQlFYZENMRTlCUVhoQ0xFTkJRV1lzUXl4RFFVRnBSRHM3UVVGRGFrUXNVVUZCVVN4RFFVRkRMR2RDUVVGVUxFTkJRVEpDTEU5QlFUTkNMRVZCUVc5RExGbEJRVTA3UVVGQlJUdEJRVU40UXl4TlFVRkpMRWxCUVVrc1IwRkJSeXhOUVVGTkxFTkJRVU1zYVVKQlFVUXNRMEZCYWtJc1EwRkVjME1zUTBGRFFUczdRVUZEZEVNc1JVRkJRU3hMUVVGTExHbEVRVUZoTEVsQlFXSXNUMEZCVEN4RFFVWnpReXhEUVVWV08wRkJReTlDTEVOQlNFUXNSU3hEUVV0Qk96dEJRVU5CTEVsQlFVa3NVMEZCVXl4SFFVRkhMRkZCUVZFc1EwRkJReXhqUVVGVUxFTkJRWGRDTEZGQlFYaENMRU5CUVdoQ08wRkJRMEVzVTBGQlV5eERRVUZETEdkQ1FVRldMRU5CUVRKQ0xFOUJRVE5DTEVWQlFXOURMRmxCUVUwN1FVRkRkRU1zVFVGQlNTeFpRVUZaTEVkQlFVY3NUVUZCVFN4RFFVRkRMR2xEUVVGRUxFVkJRVzlETEVWQlFYQkRMRU5CUVhwQ08wRkJRMEVzVFVGQlNTeFRRVUZUTEVkQlFVY3NTVUZCU1N4WlFVRndRanRCUVVOQkxFVkJRVUVzUzBGQlN5eERRVUZETEZOQlFVUXNRMEZCVER0QlFVTklMRU5CU2tRc1JTeERRVTlCT3p0QlFVTkJMRWxCUVVrc1VVRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF5eGpRVUZVTEVOQlFYZENMRTlCUVhoQ0xFTkJRV1k3UVVGRFFTeFJRVUZSTEVOQlFVTXNaMEpCUVZRc1EwRkJNRUlzVDBGQk1VSXNSVUZCYlVNc1dVRkJUVHRCUVVOeVF5eE5RVUZKTEdkQ1FVRm5RaXhIUVVGSExFMUJRVTBzUTBGQlF5dzBRa0ZCUkN4RlFVRXJRaXhKUVVFdlFpeERRVUUzUWp0QlFVTkJMRTFCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzU1VGQlNpeEZRVUZhTzBGQlEwRXNUVUZCU1N4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRExGZEJRVTRzUzBGQmMwSXNaMEpCUVhCRE8wRkJRMEVzUlVGQlFTeExRVUZMTERoQ1FVRlJMRTlCUVZJc01FSkJRVXc3UVVGRFNDeERRVXhFTEVVc1EwRlBRVHM3UVVGRFFTeEpRVUZKTEZOQlFWTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1kwRkJWQ3hEUVVGM1FpeFJRVUY0UWl4RFFVRm9RanRCUVVOQkxGTkJRVk1zUTBGQlF5eG5Ra0ZCVml4RFFVRXlRaXhQUVVFelFpeEZRVUZ2UXl4WlFVRk5PMEZCUTNSRExFMUJRVWtzUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl3MFFrRkJSQ3hGUVVFclFpeEZRVUV2UWl4RFFVRmtPMEZCUTBFc1RVRkJTU3hEUVVGRExFZEJRVWNzV1VGQlVqdEJRVU5CTEUxQlFVa3NXVUZCV1N4SFFVRkhMRU5CUVVNc1dVRkJTU3hEUVVGS0xFVkJRVk1zUTBGQlZDeERRVUZ3UWp0QlFVTkJMRVZCUVVFc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZNTEVOQlFWY3NXVUZCV0N4RFFVRm1PMEZCUTBFc1JVRkJRU3hMUVVGTExHMUlRVUYxUWl4WlFVRjJRaXhQUVVGTU8wRkJRMGdzUTBGT1JDeEZMRU5CVVVFN08wRkJRMEVzU1VGQlNTeFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRMR05CUVZRc1EwRkJkMElzVDBGQmVFSXNRMEZCWmp0QlFVTkJMRkZCUVZFc1EwRkJReXhuUWtGQlZDeERRVUV3UWl4UFFVRXhRaXhGUVVGdFF5eFpRVUZOTzBGQlEzSkRMRTFCUVVrc1VVRkJVU3hIUVVGSExFMUJRVTBzUTBGQlF5eHhRMEZCUkN4RlFVRjNReXhIUVVGNFF5eERRVUZ5UWp0QlFVTkJMRTFCUVVrc1ZVRkJWU3hIUVVGSExFMUJRVTBzUTBGQlF5dzRRMEZCUkN4RlFVRnBSQ3hEUVVGcVJDeERRVUYyUWp0QlFVTkJMRTFCUVVrc1MwRkJTeXhIUVVGSExGRkJRVkVzUjBGQlJ5eFZRVUYyUWp0QlFVTkJMRVZCUVVFc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZNTEVOQlFWY3NTMEZCV0N4RFFVRlNPMEZCUTBFc1JVRkJRU3hMUVVGTExHdE1RVUZ2UXl4TFFVRndReXg1UWtGQlREdEJRVU5JTEVOQlRrUXNSU3hEUVZGQk96dEJRVU5CTEVsQlFVa3NVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJReXhqUVVGVUxFTkJRWGRDTEU5QlFYaENMRU5CUVdZN1FVRkRRU3hSUVVGUkxFTkJRVU1zWjBKQlFWUXNRMEZCTUVJc1QwRkJNVUlzUlVGQmJVTXNXVUZCVFR0QlFVTnlReXhOUVVGSkxFZEJRVWNzUjBGQlJ5eE5RVUZOTERoT1FVRXJReXhKUVVFdlF5eERRVUZvUWp0QlFVTkJMRTFCUVUwc1IwRkJSeXhIUVVGSExFbEJRVm83UVVGRFFTeE5RVUZKTEZGQlFWRXNSMEZCUnl4SFFVRkhMRWRCUVVjc1IwRkJja0k3UVVGRFFTeEZRVUZCTEV0QlFVc3NNRU5CUVZVc1IwRkJWaXgxU2tGQk5FTXNVVUZCTlVNc1owTkJRVXc3UVVGRFNDeERRVXhFTEVVc1EwRlBRVHM3UVVGRFFTeEpRVUZKTEZWQlFWVXNSMEZCUnl4UlFVRlJMRU5CUVVNc1kwRkJWQ3hEUVVGM1FpeFRRVUY0UWl4RFFVRnFRanRCUVVOQkxGVkJRVlVzUTBGQlF5eG5Ra0ZCV0N4RFFVRTBRaXhQUVVFMVFpeEZRVUZ4UXl4WlFVRk5PMEZCUTNaRExFMUJRVWtzVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4blEwRkJSQ3hGUVVGdFF5eEZRVUZ1UXl4RFFVRnVRanRCUVVOQkxFMUJRVWtzUzBGQlN5eEhRVUZKTEUxQlFVMHNSMEZCUnl4SlFVRldMRWRCUVd0Q0xFZEJRVGxDTzBGQlEwRXNSVUZCUVN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXdzUTBGQlZ5eExRVUZZTEVOQlFWSTdRVUZEUVN4TlFVRkpMRTlCUVU4c1IwRkJTU3hOUVVGTkxFZEJRVWNzU1VGQlZpeEhRVUZyUWl4SFFVRm9RenRCUVVOQkxFVkJRVUVzUzBGQlN5eDNTVUZCTmtJc1RVRkJOMElzT0VoQlFUWkVMRXRCUVRkRUxEUk1RVUUyUnl4UFFVRTNSeXc0UWtGQlREdEJRVU5JTEVOQlRrUXNSU3hEUVZGQk96dEJRVU5CTEVsQlFVa3NVMEZCVXl4SFFVRkhMRkZCUVZFc1EwRkJReXhqUVVGVUxFTkJRWGRDTEZGQlFYaENMRU5CUVdoQ08wRkJRMEVzVTBGQlV5eERRVUZETEdkQ1FVRldMRU5CUVRKQ0xFOUJRVE5DTEVWQlFXOURMRmxCUVUwN1FVRkRkRU1zVFVGQlNTeGhRVUZoTEVkQlFVY3NUVUZCVFN4RFFVRkRMRFJDUVVGRUxFVkJRU3RDTEVkQlFTOUNMRU5CUVRGQ08wRkJRMEVzVFVGQlNTeFRRVUZUTEVkQlFVY3NUVUZCVFN4RFFVRkRMSFZDUVVGRUxFVkJRVEJDTEVsQlFURkNMRU5CUVhSQ08wRkJRMEVzVFVGQlNTeE5RVUZOTEVkQlFVY3NZVUZCWVN4SFFVRkhMRk5CUVRkQ08wRkJRMEVzUlVGQlFTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVV3c1EwRkJWeXhOUVVGWUxFTkJRVlE3UVVGRFFTeE5RVUZKTEZOQlFWTXNSMEZCUnl4aFFVRmhMRWRCUVVjc1UwRkJhRU03UVVGRFFTeE5RVUZKTEZGQlFWRXNSMEZCUnl4UlFVRm1PMEZCUTBFc1JVRkJRU3hMUVVGTExIZENRVUZQTEdGQlFWQXNlVWxCUVN0RExFMUJRUzlETERoS1FVRnpSaXhUUVVGMFJpeGpRVUZ0Unl4UlFVRnVSeXhQUVVGTU8wRkJRMGdzUTBGU1JDeEZMRU5CVlVFN08wRkJRMEVzU1VGQlNTeFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRMR05CUVZRc1EwRkJkMElzVDBGQmVFSXNRMEZCWmp0QlFVTkJMRkZCUVZFc1EwRkJReXhuUWtGQlZDeERRVUV3UWl4UFFVRXhRaXhGUVVGdFF5eFpRVUZOTzBGQlEzSkRMRTFCUVVrc1IwRkJSeXhIUVVGSExFMUJRVTBzUTBGQlF5dzRRMEZCUkN4RlFVRnBSQ3hIUVVGcVJDeERRVUZvUWpzN1FVRkRRU3hYUVVGVExHTkJRVlFzUTBGQmQwSXNSMEZCZUVJc1JVRkJOa0k3UVVGRE4wSXNVVUZCU1N4TlFVRk5MRWRCUVVjc1EwRkJZanM3UVVGRFFTeFhRVUZQTEVkQlFWQXNSVUZCV1R0QlFVTlNMRTFCUVVFc1RVRkJUU3hIUVVGSExFMUJRVTBzUjBGQlJ5eEZRVUZVTEVkQlFXTXNSMEZCUnl4SFFVRkhMRVZCUVRkQ08wRkJRMEVzVFVGQlFTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVV3c1EwRkJWeXhIUVVGSExFZEJRVWNzUlVGQmFrSXNRMEZCVGp0QlFVTklPenRCUVVORUxGZEJRVThzVFVGQlVEdEJRVU5ET3p0QlFVTkVMRVZCUVVFc1MwRkJTeXhEUVVGRExHTkJRV01zUTBGQlF5eEhRVUZFTEVOQlFXWXNRMEZCVER0QlFVTklMRU5CV0VRc1JTeERRV0ZCT3p0QlFVTkJMRWxCUVVrc1VVRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF5eGpRVUZVTEVOQlFYZENMRTlCUVhoQ0xFTkJRV1k3UVVGRFFTeFJRVUZSTEVOQlFVTXNaMEpCUVZRc1EwRkJNRUlzVDBGQk1VSXNSVUZCYlVNc1dVRkJUVHRCUVVOeVF5eE5RVUZKTEVkQlFVY3NSMEZCUnl4TlFVRk5MRU5CUVVNc2RVSkJRVVFzUTBGQmFFSTdRVUZEUVN4TlFVRkpMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zTmtOQlFVUXNRMEZCYmtJN1FVRkRRU3hOUVVGSkxFZEJRVWNzUjBGQlNTeEhRVUZITEVkQlFVY3NTVUZCVUN4SFFVRmxMRVZCUVdZc1IwRkJiMElzVFVGQk9VSTdRVUZEUVN4RlFVRkJMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlRDeERRVUZYTEVkQlFWZ3NRMEZCVGp0QlFVTkJMRVZCUVVFc1MwRkJTeXgzUWtGQlR5eE5RVUZRTEcxTFFVRTRReXhIUVVFNVF5dzBRMEZCVER0QlFVTklMRU5CVGtRc1JTeERRVkZCT3p0QlFVTkJMRWxCUVVrc1VVRkJVU3hIUVVGRkxGRkJRVkVzUTBGQlF5eGpRVUZVTEVOQlFYZENMRlZCUVhoQ0xFTkJRV1E3UVVGRFFTeFJRVUZSTEVOQlFVTXNaMEpCUVZRc1EwRkJNRUlzVDBGQk1VSXNSVUZCYlVNc1dVRkJUVHRCUVVOeVF5eE5RVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhyUWtGQlJDeERRVUZxUWpzN1FVRkZRU3hOUVVGSkxFZEJRVWNzUjBGQlJ5eEZRVUZXTEVWQlFXTTdRVUZEVml4SlFVRkJMRXRCUVVzc1EwRkJReXhyUWtGQlJDeERRVUZNTzBGQlEwZ3NSMEZHUkN4TlFVVlBMRWxCUVVzc1ZVRkJRU3hIUVVGSE8wRkJRVUVzVjBGQlNTeE5RVUZOTEVkQlFVY3NSMEZCUnl4RlFVRm9RanRCUVVGQkxFZEJRVklzUlVGQk5FSTdRVUZETDBJc1NVRkJRU3hMUVVGTExFTkJRVU1zZVVKQlFVUXNRMEZCVER0QlFVTklMRWRCUmswc1RVRkZRU3hKUVVGTExGVkJRVUVzUjBGQlJ6dEJRVUZCTEZkQlFVa3NUVUZCVFN4SFFVRkhMRWRCUVVjc1JVRkJhRUk3UVVGQlFTeEhRVUZTTEVWQlFUUkNPMEZCUXk5Q0xFbEJRVUVzUzBGQlN5eERRVUZETEcxRFFVRkVMRU5CUVV3N1FVRkRTQ3hIUVVaTkxFMUJSVUVzU1VGQlNTeFZRVUZCTEVkQlFVYzdRVUZCUVN4WFFVRkpMRTFCUVUwc1IwRkJSeXhKUVVGSkxFZEJRV3BDTzBGQlFVRXNSMEZCVUN4RlFVRTJRanRCUVVOb1F5eEpRVUZCTEV0QlFVc3NRMEZCUXl4MVEwRkJSQ3hEUVVGTU8wRkJRMGdzUjBGR1RTeE5RVVZCTzBGQlEwZ3NTVUZCUVN4TFFVRkxMRU5CUVVNc05FSkJRVVFzUTBGQlREdEJRVU5JT3p0QlFVTkVMRVZCUVVFc1QwRkJUeXhEUVVGRExFZEJRVklzUTBGQldTeEhRVUZhTzBGQlEwZ3NRMEZtUkNJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lLR1oxYm1OMGFXOXVLQ2w3Wm5WdVkzUnBiMjRnY2lobExHNHNkQ2w3Wm5WdVkzUnBiMjRnYnlocExHWXBlMmxtS0NGdVcybGRLWHRwWmlnaFpWdHBYU2w3ZG1GeUlHTTlYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnY21WeGRXbHlaU1ltY21WeGRXbHlaVHRwWmlnaFppWW1ZeWx5WlhSMWNtNGdZeWhwTENFd0tUdHBaaWgxS1hKbGRIVnliaUIxS0drc0lUQXBPM1poY2lCaFBXNWxkeUJGY25KdmNpaGNJa05oYm01dmRDQm1hVzVrSUcxdlpIVnNaU0FuWENJcmFTdGNJaWRjSWlrN2RHaHliM2NnWVM1amIyUmxQVndpVFU5RVZVeEZYMDVQVkY5R1QxVk9SRndpTEdGOWRtRnlJSEE5Ymx0cFhUMTdaWGh3YjNKMGN6cDdmWDA3WlZ0cFhWc3dYUzVqWVd4c0tIQXVaWGh3YjNKMGN5eG1kVzVqZEdsdmJpaHlLWHQyWVhJZ2JqMWxXMmxkV3pGZFczSmRPM0psZEhWeWJpQnZLRzU4ZkhJcGZTeHdMSEF1Wlhod2IzSjBjeXh5TEdVc2JpeDBLWDF5WlhSMWNtNGdibHRwWFM1bGVIQnZjblJ6ZldadmNpaDJZWElnZFQxY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnlaWEYxYVhKbEppWnlaWEYxYVhKbExHazlNRHRwUEhRdWJHVnVaM1JvTzJrckt5bHZLSFJiYVYwcE8zSmxkSFZ5YmlCdmZYSmxkSFZ5YmlCeWZTa29LU0lzSWk4dklERXUwSmZRc05DLzBZRFF2dEdCMExqUmd0QzFJTkdESU5DLzBMN1F1OUdNMExmUXZ0Q3kwTERSZ3RDMTBMdlJqeURRdGRDejBMNGcwTGpRdk5HUElOQzRJTkN5MFl2UXN0QzEwTFRRdU5HQzBMVWcwTElnMEw3Umd0Q3kwTFhSZ2pvZ3dxdlFuOUdBMExqUXN0QzEwWUlzSU5DMTBMUFF2aURRdU5DODBZOGh3cnN1WEc1c1pYUWdabWx5YzNSQ2RHNGdQU0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25abWx5YzNRbktUc2dMeS9RdE5DKzBZSFJndEN3MFk0ZzBMclF2ZEMrMEwvUXV0R0RJTkM0MExjZ2FIUnRiQ0RSaE5DdzBMblF1OUN3SUZ4dVptbHljM1JDZEc0dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnZ0oyTnNhV05ySnl3Z0tDa2dQVDRnZXlBdkx5RFF2OUdBMExnZzBMM1FzTkMyMExEUmd0QzQwTGdnMEwzUXNDRFF1dEM3MExqUXVpRFFzdEdMMEwvUXZ0QzcwTDNSajlDMTBZTFJnZEdQSU5DMDBMWFF1ZEdCMFlMUXN0QzQwTFVnWEc0Z0lDQWdkbUZ5SUc1aGJXVWdQU0J3Y205dGNIUW9KOUNhMExEUXVpRFFzdEN3MFlFZzBMZlF2dEN5MFlQUmdpQS9KeWs3SUM4dklOQzMwTERRdjlHQTBMRFJpTkM0MExMUXNOR09JTkM0MEx6UmoxeHVJQ0FnSUdGc1pYSjBJQ2hnMEovUmdOQzQwTExRdGRHQ0xDQWtlMjVoYldWOUlXQXBPeUF2THlEUWt0R0wwTFRRc05HT0lOQzQwTHpSanlCY2JuMHBPMXh1WEc0dkx5QXlMdENYMExEUXY5R0EwTDdSZ2RDNDBZTFF0U0RSZ3lEUXY5QyswTHZSak5DMzBMN1FzdEN3MFlMUXRkQzcwWThnMExUUXU5QzQwTDNSZ3lEUmdkR0MwTDdSZ05DKzBMM1JpeURRdXRDeTBMRFF0TkdBMExEUmd0Q3dJTkM0SU5DeTBZdlFzdEMxMExUUXVOR0MwTFVnMEwvUXRkR0EwTGpRdk5DMTBZTFJnQ0RSZ3RDdzBMclF2dEN6MEw0ZzBMclFzdEN3MExUUmdOQ3cwWUxRc0M1Y2JteGxkQ0J6WldOdmJtUkNkRzRnUFNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duYzJWamIyNWtKeWs3WEc1elpXTnZibVJDZEc0dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENBb0tTQTlQaUI3WEc0Z0lDQWdiR1YwSUhOcGVtVlBabE54ZFdGeVpTQTlJSEJ5YjIxd2RDZ24wSkxRc3RDMTBMVFF1TkdDMExVZzBMVFF1OUM0MEwzUmd5RFJnZEdDMEw3UmdOQyswTDNSaXlEUXV0Q3kwTERRdE5HQTBMRFJndEN3TGljc0lESXdLVHRjYmlBZ0lDQnNaWFFnYzNWdFUzRjFZWEpsSUQwZ05DQXFJSE5wZW1WUFpsTnhkV0Z5WlR0Y2JpQWdJQ0JoYkdWeWRDaHpkVzFUY1hWaGNtVXBPMXh1ZlNrN1hHNWNibHh1THk4Z015N1FsOUN3MEwvUmdOQyswWUhRdU5HQzBMVWcwWU1nMEwvUXZ0QzcwWXpRdDlDKzBMTFFzTkdDMExYUXU5R1BJTkN6MEw3UXRDRFF0ZEN6MEw0ZzBZRFF2dEMyMExUUXRkQzkwTGpSanl3ZzBML1F2dEdCMFlmUXVOR0MwTERRdWRHQzBMVXNJTkdCMExyUXZ0QzcwWXpRdXRDK0lOQzEwTHpSZ3lEUXU5QzEwWUlnMExnZzBMTFJpOUN5MExYUXROQzQwWUxRdFNEUmdOQzEwTGZSZzlDNzBZelJndEN3MFlJdUlOQ2kwTFhRdXRHRDBZblF1TkM1SU5DejBMN1F0Q0RSZzlDNjBMRFF0dEM0MFlMUXRTRFFzaURRdXRDKzBMVFF0U0RRdXRDdzBMb2cwTHJRdnRDOTBZSFJndEN3MEwzUmd0R0RMbHh1YkdWMElIUm9hWEprUW5SdUlEMGdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0ozUm9hWEprSnlrN1hHNTBhR2x5WkVKMGJpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lDZ3BJRDArSUh0Y2JpQWdJQ0JzWlhRZ2VXVmhjbGx2ZFhKQ2FYSjBhR1JoZVNBOUlIQnliMjF3ZENnbjBKSWcwTHJRc05DNjBMN1F2Q0RRczlDKzBMVFJneURRc3RHTElOR0EwTDdRdE5DNDBMdlF1TkdCMFl3Z1B5Y3NJREU1TURBcE8xeHVJQ0FnSUhaaGNpQjBiMlJoZVNBOUlHNWxkeUJFWVhSbEtDazdYRzRnSUNBZ2JHVjBJSGx2ZFhKQloyVWdQU0IwYjJSaGVTNW5aWFJHZFd4c1dXVmhjaWdwSUMwZ2VXVmhjbGx2ZFhKQ2FYSjBhR1JoZVR0Y2JpQWdJQ0JoYkdWeWRDaGcwSkxRc05DOElDUjdlVzkxY2tGblpYMGcwTHZRdGRHQ0lXQXBPMXh1ZlNrN1hHNWNiaTh2SURRdTBKZlFzTkMvMFlEUXZ0R0IwTGpSZ3RDMUlOR0RJTkMvMEw3UXU5R00wTGZRdnRDeTBMRFJndEMxMEx2Ump5RFJnTkN3MExUUXVOR0QwWUVnMEw3UXV0R0EwWVBRdHRDOTBMN1JnZEdDMExnZzBMZ2cwTExSaTlDeTBMWFF0TkM0MFlMUXRTRFF2OUM3MEw3UmlkQ3cwTFRSakNEUmd0Q3cwTHJRdnRDNUlOQyswTHJSZ05HRDBMYlF2ZEMrMFlIUmd0QzRMbHh1YkdWMElHWnZkWEowYUVKMGJpQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDZG1iM1Z5ZEdnbktUdGNibVp2ZFhKMGFFSjBiaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJQ2dwSUQwK0lIdGNiaUFnSUNCc1pYUWdjaUE5SUhCeWIyMXdkQ2duMEpmUXNOQzAwTERRdWRHQzBMVWcwWURRc05DMDBMalJnOUdCSU5DKzBMclJnTkdEMExiUXZkQyswWUhSZ3RDNFB5Y3NJRE13S1R0Y2JpQWdJQ0JzWlhRZ2NDQTlJRE11TVRReE5Ua3lOalV6TlR0Y2JpQWdJQ0JzWlhRZ1lYSmxZVTltUTJseVkyeGxJRDBnY0NBcUlDaHlJQ29xSURJcE8xeHVJQ0FnSUdGeVpXRlBaa05wY21Oc1pTQTlJRTFoZEdndVpteHZiM0lvWVhKbFlVOW1RMmx5WTJ4bEtUdGNiaUFnSUNCaGJHVnlkQ2hnMEovUXU5QyswWW5Rc05DMDBZd2cwTDdRdXRHQTBZUFF0dEM5MEw3UmdkR0MwTGdnSkh0aGNtVmhUMlpEYVhKamJHVjlJV0FwTzF4dWZTazdYRzVjYmk4dklEVXUwSmZRc05DLzBZRFF2dEdCMExqUmd0QzFJTkdESU5DLzBMN1F1OUdNMExmUXZ0Q3kwTERSZ3RDMTBMdlJqeURSZ05DdzBZSFJnZEdDMEw3Umo5QzkwTGpRdFNEUXNpRFF1dEM4SU5DODBMWFF0dEMwMFlNZzBMVFFzdEdEMEx6Ump5RFFzOUMrMFlEUXZ0QzAwTERRdk5DNElOQzRJTkMzMExBZzBZSFF1dEMrMEx2UmpOQzYwTDRnMFlmUXNOR0IwTDdRc2lEUXZ0QzlJTkdGMEw3Umg5QzEwWUlnMExUUXZ0Q3gwWURRc05HQzBZelJnZEdQTGlEUW45QyswWUhSaDlDNDBZTFFzTkM1MFlMUXRTRFJnZEM2MEw3UmdOQyswWUhSZ3RHTUxDRFJnU0RRdXRDKzBZTFF2dEdBMEw3UXVTRFF2ZEMxMEw3UXNkR0YwTDdRdE5DNDBMelF2aURRdE5DeTBMalFzOUN3MFlMUmpOR0IwWThzSU5HSDBZTFF2dEN4MFlzZzBZUFJnZEMvMExYUmd0R01JTkN5MEw3UXN0R0EwTFhRdk5HUExseHViR1YwSUdacFpuUm9RblJ1SUQwZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjJacFpuUm9KeWs3WEc1bWFXWjBhRUowYmk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUNncElEMCtJSHRjYmlBZ0lDQnNaWFFnWkdsemRHRnVZMlVnUFNCd2NtOXRjSFFvSjlDYTBMRFF1dEN3MFk4ZzBMVFF1TkdCMFlMUXNOQzkwWWJRdU5HUElOQzgwTFhRdHRDMDBZTWcwWUxRdnRHSDBMclF2dEM1SU5DUUlOQzRJTkNSUHljc0lETTBNQ2s3WEc0Z0lDQWdiR1YwSUhScGJXVlViMDF2ZG1VZ1BTQndjbTl0Y0hRb0o5Q1gwTEFnMFlIUXV0QyswTHZSak5DNjBMNGcwTExSZ05DMTBMelF0ZEM5MExnZzBMTFJpeURRdjlDNzBMRFF2ZEM0MFlEUmc5QzEwWUxRdFNEUXROQyswTEhSZ05DdzBZTFJqTkdCMFk4Z1B5Y3NJRFlwTzF4dUlDQWdJR3hsZENCemNHVmxaQ0E5SUdScGMzUmhibU5sSUM4Z2RHbHRaVlJ2VFc5MlpUdGNiaUFnSUNCemNHVmxaQ0E5SUUxaGRHZ3VabXh2YjNJb2MzQmxaV1FwTzF4dUlDQWdJR0ZzWlhKMEtHRFFrdEN3MEx3ZzBMM1JnOUMyMEwzUXZpRFF0TkN5MExqUXM5Q3cwWUxSak5HQjBZOGcwWUhRdmlEUmdkQzYwTDdSZ05DKzBZSFJndEdNSUNSN2MzQmxaV1I5MExyUXZDL1JoMkFwTzF4dWZTazdYRzVjYmk4dklEWXUwS0RRdGRDdzBMdlF1TkMzMFlQUXVkR0MwTFVnMExyUXZ0QzkwTExRdGRHQTBZTFF2dEdBSU5DeTBMRFF1OUdPMFlJdUlOQ2YwTDdRdTlHTTBMZlF2dEN5MExEUmd0QzEwTHZSakNEUXN0Q3kwTDdRdE5DNDBZSWcwTFRRdnRDNzBMdlFzTkdBMFlzc0lOQy8wWURRdnRDejBZRFFzTkM4MEx6UXNDRFF2OUMxMFlEUXRkQ3kwTDdRdE5DNDBZSWcwTElnMExYUXN0R0EwTDR1SU5DYTBZUFJnTkdCSU5DeTBMRFF1OUdPMFlMUml5RFJoZEdBMExEUXZkQzQwWUxRdFNEUXNpRFF1dEMrMEwzUmdkR0MwTERRdmRHQzBMVXVYRzVzWlhRZ2MybDRkR2hDZEc0Z1BTQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnbmMybDRkR2duS1R0Y2JuTnBlSFJvUW5SdUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z0tDa2dQVDRnZTF4dUlDQWdJR3hsZENCVlUwUWdQU0J3Y205dGNIUW9ZTkNhMExEUXV0R0QwWTRnMFlIUmc5QzgwTHpSZ3lEUXROQyswTHZRdTlDKzBZRFF2dEN5SU5DeTBZc2cwTGJRdGRDNzBMRFF0ZEdDMExVZzBML1F2dEM4MExYUXZkR1AwWUxSakNBL1lDd2dNVEF3TUNrN1hHNGdJQ0FnWTI5dWMzUWdSVlZTSUQwZ01DNDROVHRjYmlBZ0lDQnNaWFFnYzNWdFRXOXVaWGtnUFNCVlUwUWdLaUJGVlZJN1hHNGdJQ0FnWVd4bGNuUW9ZTkNjMExYUXZkR1AwWThnSkh0VlUwUjlJTkMwMEw3UXU5QzcwTERSZ05DKzBMSXNJTkdESU5DeTBMRFJnU0RRdjlDKzBMdlJnOUdIMExEUXRkR0MwWUhSanlBa2UzTjFiVTF2Ym1WNWZTRFF0ZEN5MFlEUXZpRmdLVHRjYm4wcE8xeHVYRzR2THlBM0x0Q2YwTDdRdTlHTTBMZlF2dEN5MExEUmd0QzEwTHZSakNEUmc5QzYwTERRdDlHTDBMTFFzTkMxMFlJZzBMN1FzZEdLMExYUXZDRFJoTkM3MExYUmlOQzYwTGdnMExJZzBKUFFzUzRnMEovUmdOQyswTFBSZ05DdzBMelF2TkN3SU5DMDBMN1F1OUMyMEwzUXNDRFF2OUMrMFlIUmg5QzQwWUxRc05HQzBZd3NJTkdCMExyUXZ0QzcwWXpRdXRDK0lOR0UwTERRdWRDNzBMN1FzaURSZ05DdzBMZlF2TkMxMFlEUXZ0QzhJTkN5SURneU1DRFFuTkN4SU5DLzBMN1F2TkMxMFluUXNOQzEwWUxSZ2RHUElOQzkwTEFnMFlUUXU5QzEwWWpRdXRHRExseHViR1YwSUhObGRtVnVkR2hDZEc0Z1BTQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnbmMyVjJaVzUwYUNjcE8xeHVjMlYyWlc1MGFFSjBiaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJQ2dwSUQwK0lIdGNiaUFnSUNCc1pYUWdiV1Z0YjNKNUlEMGdjSEp2YlhCMEtDZlFtdEN3MExyUXZ0QzVJTkdESU5DeTBMRFJnU0RRdnRDeDBZelF0ZEM4SU5HRTBMdlF0ZEdJMExyUXVDRFFzaURRazlDUlB5Y3NJREUyS1R0Y2JpQWdJQ0JzWlhRZ1ptbHNaWE1nUFNBb2JXVnRiM0o1SUNvZ01UQXdNQ2tnTHlBNE1qQTdYRzRnSUNBZ1ptbHNaWE1nUFNCTllYUm9MbVpzYjI5eUtHWnBiR1Z6S1R0Y2JpQWdJQ0JzWlhRZ2NtVnphV1IxWlNBOUlDaHRaVzF2Y25rZ0tpQXhNREF3S1NBbElEZ3lNRHRjYmlBZ0lDQmhiR1Z5ZENoZzBKM1FzQ0RRc3RDdzBZalJneURSaE5DNzBMWFJpTkM2MFlNZzBZRWcwTDdRc2RHTTBMWFF2TkMrMEx3Z0pIdHRaVzF2Y25sOUxDRFFzdEdMSU5HQjBMelF2dEMyMExYUmd0QzFJTkMzMExEUXM5R0EwWVBRdDlDNDBZTFJqQ0FrZTJacGJHVnpmU0RSaE5DdzBMblF1OUMrMExJZzBML1F2aUE0TWpEUXZOQ3hMaURRa0NEUXRkR0owTFVnMFlNZzBMTFFzTkdCSU5DKzBZSFJndEN3MEwzUXRkR0MwWUhSanlBa2UzSmxjMmxrZFdWOTBMelFzZkNmbUlwZ0tUdGNibjBwTzF4dVhHNHZMeUE0THRDZjBMN1F1OUdNMExmUXZ0Q3kwTERSZ3RDMTBMdlJqQ0RRc3RDeTBMN1F0TkM0MFlJZzBZSFJnOUM4MEx6Umd5RFF0TkMxMEwzUXRkQ3pJTkN5SU5DNjBMN1JpTkMxMEx2UmpOQzYwTFVnMExnZzBZYlF0ZEM5MFlNZzBMN1F0TkM5MEw3UXVTRFJpTkMrMExyUXZ0QzcwTERRdE5DNjBMZ3VJTkNmMFlEUXZ0Q3owWURRc05DODBMelFzQ0RRc3RHTDBMTFF2dEMwMExqUmdpd2cwWUhRdXRDKzBMdlJqTkM2MEw0ZzBZalF2dEM2MEw3UXU5Q3cwTFRRdnRDNklOQzgwTDdRdHRDMTBZSWcwTHJSZzlDLzBMalJndEdNSU5DLzBMN1F1OUdNMExmUXZ0Q3kwTERSZ3RDMTBMdlJqQ3dnMExnZzBZSFF1dEMrMEx2UmpOQzYwTDRnMFlIUXROQ3cwWWZRdUNEUmd5RFF2ZEMxMExQUXZpRFF2dEdCMFlMUXNOQzkwTFhSZ3RHQjBZOHVYRzVzWlhRZ1pXbG5hSFJvUW5SdUlEMGdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oyVnBaMmgwYUNjcE8xeHVaV2xuYUhSb1FuUnVMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk5zYVdOckp5d2dLQ2tnUFQ0Z2UxeHVJQ0FnSUd4bGRDQmhiVzkxYm5SUFprMXZibVY1SUQwZ2NISnZiWEIwS0NmUW9kQzYwTDdRdTlHTTBMclF2aURSZ3lEUXN0Q3cwWUVnMExYUmdkR0MwWXdnMExUUXRkQzkwTFhRc3lBL0p5d2dNakF3S1R0Y2JpQWdJQ0JzWlhRZ1kyaHZhMjlzWVhSbElEMGdjSEp2YlhCMEtDZlFwdEMxMEwzUXNDRFF2dEMwMEwzUXZ0QzVJTkdJMEw3UXV0QyswTHZRc05DMDBMclF1RDhuTENBeU9DNDFLVHRjYmlBZ0lDQnNaWFFnY0dsbFkyVnpJRDBnWVcxdmRXNTBUMlpOYjI1bGVTQXZJR05vYjJ0dmJHRjBaVHRjYmlBZ0lDQndhV1ZqWlhNZ1BTQk5ZWFJvTG1ac2IyOXlLSEJwWldObGN5azdYRzRnSUNBZ2JHVjBJSE4xY25KbGJtUmxjaUE5SUdGdGIzVnVkRTltVFc5dVpYa2dKU0JqYUc5cmIyeGhkR1U3WEc0Z0lDQWdiR1YwSUdOMWNuSmxibU41SUQwZ0o5Q3owWURRdU5DeTBMWFF2U2M3WEc0Z0lDQWdZV3hsY25Rb1lOQ2QwTEFnSkh0aGJXOTFiblJQWmsxdmJtVjVmZEN6MFlEUXVOQ3kwTFhRdlNEUXN0R0xJTkM4MEw3UXR0QzEwWUxRdFNEUXV0R0QwTC9RdU5HQzBZd2dKSHR3YVdWalpYTjlJTkdJMEw3UXV0QyswTHZRc05DMDBMN1F1aTRnMEpnZzBZTWcwTExRc05HQklOQyswWUhSZ3RDdzBMM1F0ZEdDMFlIUmp5QWtlM04xY25KbGJtUmxjbjBnSkh0amRYSnlaVzVqZVgwaFlDazdYRzU5S1R0Y2JseHVMeThnT1M3UWw5Q3cwTC9SZ05DKzBZSFF1TkdDMExVZzBZTWcwTC9RdnRDNzBZelF0OUMrMExMUXNOR0MwTFhRdTlHUElOR0MwWURRdGRHRjBMZlF2ZEN3MFlmUXZkQyswTFVnMFlmUXVOR0IwTHZRdmlEUXVDRFFzdEdMMExMUXRkQzAwTGpSZ3RDMUlOQzEwTFBRdmlEUXQ5Q3cwTFRRdnRDOElOQzkwTERRdjlDMTBZRFF0ZEMwTGlEUWxOQzcwWThnMFlEUXRkR0kwTFhRdmRDNDBZOGcwTGZRc05DMDBMRFJoOUM0SU5DeTBMRFF2Q0RRdjlDKzBMM1FzTkMwMEw3UXNkQzQwWUxSZ2RHUElOQyswTC9RdGRHQTBMRFJndEMrMFlBZ0pTQW8wTDdSZ2RHQzBMRFJndEMrMExvZzBMN1JnaURRdE5DMTBMdlF0ZEM5MExqUmp5a3VYRzVzWlhRZ2JtbHVkR2hDZEc0Z1BTQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnbmJtbHVkR2duS1R0Y2JtNXBiblJvUW5SdUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z0tDa2dQVDRnZTF4dUlDQWdJR3hsZENCdWRXMGdQU0J3Y205dGNIUW9KOUNTMExMUXRkQzAwTGpSZ3RDMUlOQzcwWTdRc2RDKzBMVWcwWWZRdU5HQjBMdlF2aUVnMEpiUXRkQzcwTERSZ3RDMTBMdlJqTkM5MEw0ZzBZTFJnTkMxMFlYUXQ5QzkwTERSaDlDOTBMN1F0U0VuTENBMU9UZ3BPMXh1SUNBZ0lHWjFibU4wYVc5dUlHZGxkRkpsZG1WeWMyVmtUblZ0S0c1MWJTa2dlMXh1SUNBZ0lHeGxkQ0J5WlhOMWJIUWdQU0F3TzF4dUlDQWdJSGRvYVd4bElDaHVkVzBwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwSUQwZ2NtVnpkV3gwSUNvZ01UQWdLeUJ1ZFcwZ0pTQXhNRHRjYmlBZ0lDQWdJQ0FnYm5WdElEMGdUV0YwYUM1bWJHOXZjaWh1ZFcwZ0x5QXhNQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lDQWdmVnh1SUNBZ0lHRnNaWEowS0dkbGRGSmxkbVZ5YzJWa1RuVnRLRzUxYlNrcE8xeHVmU2s3WEc1Y2JpOHZJREV3THRDZjBMN1F1OUdNMExmUXZ0Q3kwTERSZ3RDMTBMdlJqQ0RRc3RDeTBMN1F0TkM0MFlJZzBZSFJnOUM4MEx6Umd5RFFzdEM2MEx2UXNOQzAwTEFnMExJZzBMSFFzTkM5MExvZzBMM1FzQ0F5SU5DODBMWFJnZEdQMFliUXNDd2cwWUVnMEwvUmdOQyswWWJRdGRDOTBZTFF2ZEMrMExrZzBZSFJndEN3MExMUXV0QyswTGtnMExUUXRkQy8wTDdRdDlDNDBZTFFzQ0ExSlNEUXM5QyswTFRRdnRDeTBZdlJoUzRnMEpMUmk5Q3kwTFhSZ2RHQzBMZ2cwWUhSZzlDODBMelJneURRdmRDdzBZZlF1TkdCMEx2UXRkQzkwTDNSaTlHRklOQy8wWURRdnRHRzBMWFF2ZEdDMEw3UXNpNWNibXhsZENCMFpXNTBhRUowYmlBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0NkMFpXNTBhQ2NwTzF4dWRHVnVkR2hDZEc0dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENBb0tTQTlQaUI3WEc0Z0lDQWdiR1YwSUc1MWJTQTlJSEJ5YjIxd2RDZ24wSkxRc3RDMTBMVFF1TkdDMExVZzBZSFJnOUM4MEx6Umd5RFFzdEM2MEx2UXNOQzAwTEFoSnlrN1hHNGdJQ0FnYkdWMElHMXZiblJvY3lBOUlIQnliMjF3ZENnbjBKM1FzQ0RSZ2RDNjBMN1F1OUdNMExyUXZpRFF2TkMxMFlIUmo5R0cwTFhRc2lEUXN0R0xJTkdGMEw3Umd0QzQwWUxRdFNEUXN0QzkwTFhSZ2RHQzBMZ2cwWUhSZzlDODBMelJneUEvSnlrN1hHNGdJQ0FnYkdWMElITjFiU0E5SUNodWRXMGdLaUF3TGpBMUtTQXZJREV5SUNvZ2JXOXVkR2h6TzF4dUlDQWdJSE4xYlNBOUlFMWhkR2d1Wm14dmIzSW9jM1Z0S1R0Y2JpQWdJQ0JoYkdWeWRDaGcwSmZRc0NBa2UyMXZiblJvYzMwZzBMelF0ZEdCMFkvUmh0Q3dMQ0RRc3RDdzBMd2cwTEhSZzlDMDBMWFJnaURRdmRDdzBZZlF1TkdCMEx2UXRkQzkwTDNRdmlBa2UzTjFiWDBnMExQUmdOQzQwTExRdmRHRExtQXBPMXh1ZlNrN1hHNWNiaTh2TVM0eElOQ1gwTERRdjlHQTBMN1JnZEM0MFlMUmpDRFJneURRdjlDKzBMdlJqTkMzMEw3UXN0Q3cwWUxRdGRDNzBZOGcwTFhRczlDK0lOQ3kwTDdRdDlHQTBMRFJnZEdDSU5DNElOQyswTC9SZ05DMTBMVFF0ZEM3MExqUmd0R01MQ0RRdXRDMTBMd2cwTDdRdlNEUmo5Q3kwTHZSajlDMTBZTFJnZEdQT2lEUmdOQzEwTEhRdGRDOTBMclF2dEM4SUNndzRvQ1RNaWtzSU5DLzBMN1F0TkdBMEw3UmdkR0MwTHJRdnRDOElDZ3hNdUtBa3pFNEtTd2cwTExRdDlHQTBMN1JnZEM3MFl2UXZDQW9NVGhmTmpBcElOQzQwTHZRdUNEUXY5QzEwTDNSZ2RDNDBMN1F2ZEMxMFlEUXZ0QzhJQ2cyTU9LQWt5QXVMaTRwTGx4dWJHVjBJR1pwY25OMFQyNWxJRDFrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25abWx5YzNSUGJtVW5LVHRjYm1acGNuTjBUMjVsTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOc2FXTnJKeXdnS0NrZ1BUNGdlMXh1SUNBZ0lHeGxkQ0JoWjJVZ1BTQXJjSEp2YlhCMEtDZlFvZEM2MEw3UXU5R00wTHJRdmlEUXN0Q3cwTHdnMEx2UXRkR0NQeWNwTzF4dVhHNGdJQ0FnYVdZb0lHRm5aU0E4SURFeUtTQjdYRzRnSUNBZ0lDQWdJR0ZzWlhKMEtDZlFrdEdMSU5DMTBZblF0U0RSZ05DMTBMSFF0ZEM5MEw3UXV2Q2ZrYlluS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0NCaFoyVWdQVDRnTVRJZ2ZId2dZV2RsSUR3Z01UZ3BJSHRjYmlBZ0lDQWdJQ0FnWVd4bGNuUW9KOUNTMFlzZzBMTFJnZEMxSU5DMTBZblF0U0RRdjlDKzBMVFJnTkMrMFlIUmd0QyswTG9nOEorUnBpY3BPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9JR0ZuWlNBOVBpQXhPQ0I4ZkNCaFoyVWdQQ0EyTUNrZ2UxeHVJQ0FnSUNBZ0lDQmhiR1Z5ZENnbjBKL1F2dEMzMExUUmdOQ3cwTExRdTlHUDBZNHNJTkN5MFlzZzBZUFF0dEMxSU5DeTBMZlJnTkMrMFlIUXU5R0wwTGtnOEorUnNlS0FqZUtaZ3UrNGp5Y3BPMXh1SUNBZ0lIMGdaV3h6WlNCcFppZ2dZV2RsSUQwK0lEWXdJSHg4SUdGblpTQThQU0F4TURBcElIdGNiaUFnSUNBZ0lDQWdZV3hsY25Rb0o5Q1MwWXNnMFlQUXR0QzFJTkMvMExYUXZkR0IwTGpRdnRDOTBMWFJnQ0R3bjVHMElOQzEwWW5RdFNEUmg5R0QwWUxSakNEUmg5R0QwWUxSakNBdUxpNG5LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmhiR1Z5ZENnbjBLSFJndEdBMExEUXZkQzkwTDRzSU5DeTBZc2cwTExSZ2RDMUlOQzEwWW5RdFNEUXR0QzQwTExSaS9DZnBKUW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29ZV2RsS1R0Y2JuMHBPeUpkZlE9PSJ9
